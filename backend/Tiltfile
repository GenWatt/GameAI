load('ext://restart_process', 'docker_build_with_restart')

allow_k8s_contexts('docker-desktop')

# Install NGINX Ingress Controller using local_resource
local_resource(
    'install-nginx-ingress',
    'kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml',
    labels=['infrastructure']
)

# Gateway API with restart_process
docker_build_with_restart(
    'gameai/gateway-api:dev',
    '.', 
    dockerfile='./services/SynapseStudio.Gateway/Dockerfile.dev',
    entrypoint=[
        'dotnet', 'watch', 'run',
        '--project', './services/SynapseStudio.Gateway/SynapseStudio.Gateway.csproj',
        '--no-launch-profile'
    ],
    only=[
        './services/SynapseStudio.Gateway/',
        './services/SynapseStudio.Shared/',
    ],
    live_update=[
        sync('./services/SynapseStudio.Gateway/', '/src/services/SynapseStudio.Gateway/'),
        sync('./services/SynapseStudio.Shared/', '/src/services/SynapseStudio.Shared/'),
    ]
)

# Project API with restart_process
docker_build_with_restart(
    'gameai/project-api:dev',
    '.',
    dockerfile='./services/SynapseStudio.ProjectService/Dockerfile.dev',
    entrypoint=['dotnet', 'watch', 'run', '--project', './services/SynapseStudio.ProjectService/src/SynapseStudio.ProjectService.Api/SynapseStudio.ProjectService.Api.csproj', '--no-launch-profile'],
    only=['./services/SynapseStudio.ProjectService/', './services/SynapseStudio.Shared/'],
    live_update=[
        sync('./services/SynapseStudio.ProjectService/', '/src/services/SynapseStudio.ProjectService/'),
        sync('./services/SynapseStudio.Shared/', '/src/services/SynapseStudio.Shared/'),
    ]
)

# Conversation API with restart_process
docker_build_with_restart(
    'gameai/conversation-api:dev',
    '.',
    dockerfile='./services/SynapseStudio.ConversationService/Dockerfile.dev',
    entrypoint=['dotnet', 'watch', 'run', '--project', 'services/SynapseStudio.ConversationService/src/SynapseStudio.ConversationService.Api/SynapseStudio.ConversationService.Api.csproj', '--no-launch-profile'],
    only=['./services/SynapseStudio.ConversationService/', './services/SynapseStudio.Shared/'],
    live_update=[
        sync('./services/SynapseStudio.ConversationService/', '/src/services/SynapseStudio.ConversationService/'),
        sync('./services/SynapseStudio.Shared/', '/src/services/SynapseStudio.Shared/'),
    ]
)

# Deploy Kubernetes manifests
k8s_yaml([
    'k8s/namespace.yaml',
    'k8s/configmap.yaml',
    'k8s/secrets.yaml',
    'k8s/postgres.yaml',
    'k8s/rabbitmq.yaml',
    'k8s/project-deployment.yaml',
    'k8s/conversation-deployment.yaml', 
    'k8s/gateway-deployment.yaml',
    'k8s/ingress.yaml'
])

k8s_yaml([
    'k8s/monitoring/namespace.yaml',
    'k8s/monitoring/prometheus-rbac.yaml',
    'k8s/monitoring/prometheus-config.yaml',
    'k8s/monitoring/prometheus-deployment.yaml',
    'k8s/monitoring/grafana-dashboards.yaml',
    'k8s/monitoring/grafana-deployment.yaml'
])

# Configure resources and port forwarding
k8s_resource('gateway-api', port_forwards='5000:5000', resource_deps=['install-nginx-ingress'], labels=['services'])
k8s_resource('project-api', port_forwards='5001:5001', labels=['services'])
k8s_resource('postgres', labels=['infrastructure'])
k8s_resource('rabbitmq', labels=['infrastructure'])
k8s_resource('conversation-api', port_forwards='5002:5002', labels=['services'])

k8s_resource('prometheus', port_forwards='9090:9090', labels=['monitoring'])
k8s_resource('grafana', port_forwards='3001:3000', labels=['monitoring'])

print("""
Tilt Development Environment for C# Microservices

Access your services:
- Gateway (via Ingress): http://api.synapsestudio.com
- Gateway (Direct): http://localhost:5000
- Project API: http://localhost:5001
- Conversation API: http://localhost:5002
- Tilt UI: http://localhost:10350
- Grafana: http://localhost:3001 (auto-login enabled)
- Prometheus: http://localhost:9090

Features enabled:
Hot reload with restart_process extension
Prometheus metrics collection
Grafana dashboards with C# microservices metrics
Service discovery and monitoring
Auto NGINX Ingress Controller installation
Grafana auto-login (no credentials needed)

Organization in Tilt UI:
nfrastructure: NGINX Ingress Controller
Services: Gateway, Project API, Conversation API  
Monitoring: Prometheus, Grafana

Domain setup (requires admin privileges):
Add to C:\\Windows\\System32\\drivers\\etc\\hosts:
127.0.0.1 api.synapsestudio.com

Change your C# code and see updates automatically!
""")
