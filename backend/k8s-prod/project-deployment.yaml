apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-api
  namespace: gameai-prod
  labels:
    app.kubernetes.io/name: project-api
    app.kubernetes.io/component: microservice
    app.kubernetes.io/version: "1.0.0"
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: project-api
      app.kubernetes.io/component: microservice
  template:
    metadata:
      labels:
        app.kubernetes.io/name: project-api
        app.kubernetes.io/component: microservice
        app.kubernetes.io/version: "1.0.0"
        environment: production
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '5001'
        co.elastic.logs/enabled: 'true'
        co.elastic.logs/json.keys_under_root: 'true'
    spec:
      serviceAccountName: gameai-service-account
      imagePullSecrets:
      - name: registry-credentials
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - project-api
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: project-api
      containers:
      - name: project-api
        image: genwatt/project-api:1.0.0  # Use specific version, not latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 5001
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        envFrom:
        - configMapRef:
            name: gameai-config-prod
        - secretRef:
            name: gameai-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "1000m"
            memory: "512Mi"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: var-log
        emptyDir:
          sizeLimit: 1Gi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: project-api
  namespace: gameai-prod
  labels:
    app.kubernetes.io/name: project-api
    app.kubernetes.io/component: microservice
    environment: production
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics'
    prometheus.io/port: '5001'
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http
    port: 5001
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: project-api
    app.kubernetes.io/component: microservice
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: project-api-hpa
  namespace: gameai-prod
  labels:
    app.kubernetes.io/name: project-api
    app.kubernetes.io/component: microservice
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: project-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: project-api-pdb
  namespace: gameai-prod
  labels:
    app.kubernetes.io/name: project-api
    app.kubernetes.io/component: microservice
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: project-api
      app.kubernetes.io/component: microservice